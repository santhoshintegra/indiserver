Short description of the PL2303 driver

== Preface ==

I'm very happy that my work is used and appreciated by other developers.
I've got many emails with questions about this specific driver, and often thanking mails. My intention in developing was: 

  # I have not found a *FREE and WORKING* driver for PL2303/Android on the web
  # learning by doing (trying to port an existing driver to Android)
  # fresh up my rusted practical programming skills (in theory everything is easy)
  # To be able to understand my code later, I've tried to add useful comments. I think that the code is relatively well documented.
I'm glad that there are so many people out there, that do exactly the same :)

*As I've done this as hobby, there are flaws: i.e. I disobeyed Java coding style-guidlines. So take this driver rather as a blueprint, but please respect the GNU GPL and put your code under GPL as well.*

== Requirements ==
  * Android device with USB-Host support (no root required)
  * minimum Android 3.2 
  * Fullsize USB Port or USB-OTG-Cable
  * PL2303 Converter


== What's supported ==

  * PL2303 and newer PL2303HX-types (both tested) with ProductID 0x2303 and VendorID 0x067b
  * You can select one PL2303 out of multiple connected to your device
  * Serial parameters: Baudrate, Databits, Stopbits, Parity and something like basic RTS/CTS Flow-Control
  * Monitoring of Status-Lines DCD, DSR, RI and CTS
  * Switching of Control-Lines RTS and DTR

== What's NOT supported (at least at the moment)==

  * 3rd party PL2303 with different ProductID/VendorID (would be easy to accomplish, but I can't test ist)
  * Selecting one specific PL2303 out of multiple connected ones, because most of them don't have a S/N and thus can't be uniquely identified. The Android USB-Host-API just numbers them in the order they were connected.
  * RFR/CTS, DTR/DSR and XON/XOFF Flow-Control
  * 1.5 Stopbits
  * Mark and Space Parity 

== What's NOT tested ==

  * Although implemented, I don't know if the code is able to cope with highspeed serial communication greater than 19200 Baud. 
  * I haven't done any (critical) timing-tests - there may be obviously severe bugs! be aware of it! 
  * Although I'm aware of race-conditions and synchronized obvious critical parts of the code, there may be some problems.

== How to use it ==

  # include *PL2303driver.java* and *PL2303callback.java* in your project
  # the calling object *must implement/override* the callback-methods *onInitSuccess, onInitFailed, onRI, onDCD, onDSR, onCTS* defined in PL2303callback.java!
  # Create a new instance of the driver with the *ApplicationContext of the Main-Activity* and the *Object which implements the callback methods* as arguments.
  # call *getDeviceList(Arraylist)* to retrieve a list of all connected PL2303-devices - Mandatory, do this before open()!
  # call *open(Device)* to open a connection to one PL2303 out of the Arraylist
  # Android will now ask the user for permission and according to the result the callbacks *onInitSuccess* or *onInitFailed* will be called
  # call *setup(Baudrate, Databits, Stopbits, Parity, Flowcontrol)* to setup the serial parameters
  # call *getInputStream()* to get the readable stream of all received bytes
  # call *getOutputStream()* to get the writable stream where you put all bytes to send
  # Optional: Use the Callbacks *onRI, onDCD, onDSR, onCTS* for the Status-Lines, if you need it - otherwise leave them empty
  # Optional: call *setRTS(boolean)* or *setDTR(boolean)* to switch Control-Lines on/off 
  # If your program is exited you should call *close()* 

== Something at the end ==
  * If you have any further questions don't hesitate to ask
  * If you think it could be done better let me know
  * If there is a problem/bug send me a logcat and I'll try to figure it out
  * Patches/Bugfixes/etc. are always welcome - use the bugtracking: http://code.google.com/p/indiserver/issues/list
  * If you would like to improve/extend the test-app please send me your code. 
  * *I'm not a professional Coder! I've done this just for fun and learning purposes. I'm open to and welcome every criticism as long as it's constructive. I've got a very good background on security/timing/theory in common, but my practical skills are no way that good! So every comment is welcome.*

== Screenshot of Test app ==

because everybody likes screenshots :)

http://indiserver.googlecode.com/files/Screenshot_2013-01-04-18-51-25.png

== Downloads ==
  * The driver itself (source): http://code.google.com/p/indiserver/downloads/detail?name=PL2303driver.zip
  * A simple test-app (source): https://code.google.com/p/indiserver/downloads/detail?name=PL2303test.zip
  * Test-app as APK: http://code.google.com/p/indiserver/downloads/detail?name=PL2303test.apk